import json
import openai
import chromadb

# Initialize OpenAI client
client = openai.OpenAI()

# Constants for OpenAI completion
COMPLETION_MODEL_NAME = "gpt-3.5-turbo-instruct"
MAX_ANSWER_TOKENS = 3000


def callOpenAi(prompt):
    """
    Call OpenAI API to generate text completion given a prompt.

    Args:
        prompt (str): The prompt to send to the OpenAI API.

    Returns:
        str: The completion text generated by the OpenAI API.
    """
    try:
        response = client.completions.create(
            model=COMPLETION_MODEL_NAME,
            prompt=prompt,
            max_tokens=MAX_ANSWER_TOKENS
        )
        return response.choices[0].text.strip()
    except Exception as e:
        print(e)
        return ""


def generate_single_listing(listing_id):
    """
    Generate a single real estate listing.

    Args:
        listing_id (int): The ID for the listing.

    Returns:
        dict: A dictionary representing the generated listing.
    """
    json_example = """
    {
        "id": 1,
        "neighborhood": "Green Oaks",
        "price": 800000,
        "bedrooms": 2,
        "bathrooms": 2,
        "size_sqft": 2000,
        "description": "Welcome to this eco-friendly oasis...",
        "neighborhood description": "Green Oaks is a close-knit..."
    }
    """
    prompt = f"""
    Generate a new real estate listing with the ID {listing_id} with the same keys but new values in same JSON format provided below:
    
    "{json_example}"
    
    Make sure "description" is a text of up to 75 words.
    Make sure "neighborhood description" is a text of up to 50 words.
    """

    request = callOpenAi(prompt)

    # Parse the JSON string returned by the OpenAI API
    listing = json.loads(request)

    return listing


def generate_listings(num_listings, filename):
    """
    Generate multiple real estate listings and save them to a file.

    Args:
        num_listings (int): The number of listings to generate.
        filename (str): The name of the file to save the listings to.

    Returns:
        dict: A dictionary containing the generated listings.
    """
    listings = {"listings": []}

    for i in range(1, num_listings + 1):
        listing = generate_single_listing(i)
        listings["listings"].append(listing)

    with open(filename, 'w') as file:
        json.dump(listings, file, indent=4)

    return listings


def read_from_file(input_file):
    """
    Read listings from a JSON file.

    Args:
        input_file (str): The name of the file to read from.

    Returns:
        dict: A dictionary containing the listings read from the file.
    """
    with open(input_file, "r") as read_content:
        return json.load(read_content)


def process_listings(listings_map):
    """
    Process real estate listings and store them in a database.

    Args:
        listings_map (dict): A dictionary containing the listings to process.
    """
    client = chromadb.Client()
    collection = client.get_or_create_collection("real-estate-listings")

    for listing in listings_map["listings"]:
        print(listing)
        # Check if the required fields exist in the listing dictionary
        if all(field in listing for field in ["id"]):
            # Document content is the concatenation for House and Neighborhood descriptions
            document_content = (
                "House preferences: "
                + listing["description"]
                + " "
                + "Neighborhood preferences: "
                + listing["neighborhood description"]
            )

            # Metadata map
            doc_meta_data = {
                field: listing[field]
                for field in ["neighborhood", "price", "bedrooms", "bathrooms", "size_sqft"]
            }

            # Add record
            collection.add(
                documents=[document_content],
                metadatas=[doc_meta_data],
                ids=[str(listing["id"])],
            )
        else:
            print(
                f"Skipping listing with ID {listing.get('id')} due to missing fields.")
